// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id_user                         Int                       @id @default(autoincrement())
    user_name                       String
    pass_word                       String
    name                            String
    gender                          Boolean                   @default(true) //Male:true , female:false
    birth_date                      DateTime
    phone_number                    String?
    avatar                          String?
    is_valid                        Boolean                   @default(true)
    is_librian                      Boolean                   @default(false)
    id_job_title                    Int?
    id_major                        Int?
    job_title                       job_title?                @relation(onDelete: Cascade, fields: [id_job_title], references: [id_job_title])
    major                           major?                    @relation(onDelete: Cascade, fields: [id_major], references: [id_major]) //n-1 declare one time in n-model
    loan_return_transaction         loan_return_transaction[] @relation(name: "reader")
    loan_return_transaction_librian loan_return_transaction[] @relation(name: "librian")

    loan_request      loan_request[]
    marked_document   marked_document[]
    document_pruchase document_purchase[]

    @@map("users")
}

model major {
    id_major   Int    @id @default(autoincrement())
    major_name String
    user       user[]

    @@map("majors")
}

model job_title {
    id_job_title   Int    @id @default(autoincrement())
    job_title_name String
    user           user[]

    @@map("jobs_titles")
}

model category {
    id_category           Int                     @id @default(autoincrement())
    category_name         String
    document_ref_category document_ref_category[]

    @@map("categories")
}

model document_ref_category {
    document_id Int
    category_id Int
    category    category @relation(onDelete: Cascade, fields: [category_id], references: [id_category])
    document    document @relation(onDelete: Cascade, fields: [document_id], references: [document_id])

    @@id([document_id, category_id])
}

model document_variant {
    isbn                  String                  @id
    document_id           Int
    name                  String
    quantity              Int
    published_date        DateTime
    document              document                @relation(onDelete: Cascade, fields: [document_id], references: [document_id])
    document_puchase_list document_puchase_list[]
    loan_list_document    loan_list_document[]

    @@map("document_variants")
}

model document {
    document_id                Int                          @id @default(autoincrement())
    document_name              String
    id_author                  Int
    id_publisher               Int
    description                String?
    author                     author                       @relation(onDelete: Cascade, fields: [id_author], references: [id_author])
    publisher                  publisher                    @relation(onDelete: Cascade, fields: [id_publisher], references: [id_publisher])
    variants                   document_variant[]
    document_ref_category      document_ref_category[]
    loan_request_list_document loan_request_list_document[]
    marked                     marked_document[]
    image                      document_image[]

    @@map("documents")
}

model document_purchase {
    id_purchase           Int                     @id @default(autoincrement())
    id_supplier           Int
    purchase_date         DateTime
    id_librarian          Int
    supplier              supplier                @relation(onDelete: Cascade, fields: [id_supplier], references: [id_supplier])
    document_puchase_list document_puchase_list[]
    user                  user                    @relation(onDelete: Cascade, fields: [id_librarian], references: [id_user])

    @@map("document_puchases")
}

model document_puchase_list {
    isbn              String
    purchase_id       Int
    quantity          Int
    price             Int
    document_purchase document_purchase @relation(onDelete: Cascade, fields: [purchase_id], references: [id_purchase])
    variant           document_variant  @relation(onDelete: Cascade, fields: [isbn], references: [isbn])

    @@id([isbn, purchase_id])
}

model loan_request {
    id_loan_request             Int                          @id @default(autoincrement())
    id_reader                   Int
    status_id                   Int
    create_at                   DateTime                     @default(now())
    expected_date               DateTime                     @default(now())
    transaction_id              Int?                         @unique
    user                        user                         @relation(onDelete: Cascade, fields: [id_reader], references: [id_user])
    loan_request_list_documents loan_request_list_document[]
    status                      loan_request_status?         @relation(fields: [status_id], references: [id])
    loan_return_transaction     loan_return_transaction?     @relation(onDelete: Cascade, fields: [transaction_id], references: [id_loan_return])

    @@map("loan_requests")
}

model loan_request_status {
    name         String
    id           Int            @id @default(autoincrement())
    loan_request loan_request[]
}

model loan_list_document {
    quantity                Int
    isbn                    String
    id_loan_return          Int
    note                    String                  @db.VarChar(300)
    variant                 document_variant        @relation(onDelete: Cascade, fields: [isbn], references: [isbn])
    loan_return_transaction loan_return_transaction @relation(onDelete: Cascade, fields: [id_loan_return], references: [id_loan_return])

    @@id([id_loan_return, isbn])
    @@map("loan_list_documents")
}

model loan_request_list_document {
    id_loan_request Int
    quantity        Int
    document_id     Int
    document        document     @relation(onDelete: Cascade, fields: [document_id], references: [document_id])
    loan_request    loan_request @relation(onDelete: Cascade, fields: [id_loan_request], references: [id_loan_request])

    @@id([document_id, id_loan_request])
    @@map("loan_request_list_document")
}

model loan_return_transaction {
    id_loan_return     Int                  @id @default(autoincrement())
    id_reader          Int
    id_punish          Int?
    return_date        DateTime?
    id_librarian       Int
    due_date           DateTime
    create_at          DateTime             @default(now())
    punishment         punishment?          @relation(onDelete: Cascade, fields: [id_punish], references: [id_punish])
    user               user                 @relation(onDelete: Cascade, fields: [id_reader], references: [id_user], name: "reader")
    librian            user                 @relation(onDelete: Cascade, fields: [id_librarian], references: [id_user], name: "librian")
    loan_list_document loan_list_document[]
    loan_request       loan_request?

    @@map("loan_return_transactions")
}

model marked_document {
    id          Int      @id @default(autoincrement())
    id_reader   Int
    document_id Int
    reader      user     @relation(onDelete: Cascade, fields: [id_reader], references: [id_user])
    document    document @relation(onDelete: Cascade, fields: [document_id], references: [document_id])

    @@map("marked_documents")
}

model author {
    id_author   Int        @id @default(autoincrement())
    author_name String
    document    document[]

    @@map("authors")
}

model publisher {
    id_publisher   Int        @id @default(autoincrement())
    publisher_name String
    document       document[]

    @@map("publishers")
}

model supplier {
    id_supplier   Int                 @id @default(autoincrement())
    supplier_name String
    purchase      document_purchase[]

    @@map("suppliers")
}

model document_image {
    id       Int      @id @default(autoincrement())
    doc_id   Int
    image    String
    document document @relation(onDelete: Cascade, fields: [doc_id], references: [document_id])

    @@map("document_images")
}

model punishment {
    id_punish               Int                       @id @default(autoincrement())
    reason                  String
    is_handled              Boolean                   @default(false)
    cost                    Int
    loan_return_transaction loan_return_transaction[]

    @@map("punishments")
}
